import dataclasses

import time
import struct
import socket
import logging
import threading
import traceback

from message import Message, MessageType


# def btdebug(msg):
#     """ Prints a message to the screen with the name_message of the current thread """
#     print(f"[{threading.current_thread().name}] {msg}")


# ==============================================================================
class BTPeer:
    """
        Implements the core functionality that might be used by a peer in a
        P2P network.
    """

    def __init__(self, max_peers, server_port, server_host=None, my_id=None):
        """ Initializes a peer servant (sic.) with the ability to catalog
        information for up to max_peers number of peers (maxpeers may
        be set to 0 to allow unlimited number of peers), listening on
        a given dht port , with a given canonical peer name_message (node_id)
        and host address. If not supplied, the host address
        (server_host) will be determined by attempting to connect to an
        Internet host like Google.

        """
        self.debug = True
        self.max_peers = int(max_peers)
        self.server_port = int(server_port)
        if server_host:
            self.server_host = server_host
        else:
            self.__init_server_host()
        if my_id:
            self.id = my_id
        else:
            self.id = f'{self.server_host}:{self.server_port}'
        self.peer_lock = threading.Lock()  # ensure proper access to
        # peers list_message (maybe better to use
        # threading.RLock (reentrant))
        self.peers = {}  # peer_id ==> (host, port) mapping
        self.shutdown = False  # used to stop the main loop

        self.handlers = {}
        self.router = None

    def __init_server_host(self):
        """ Attempt to connect to an Internet host in order to determine the
        local machine's IP address.
        """
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(("www.google.com", 80))
        self.server_host = s.getsockname()[0]
        s.close()

    def __handle_peer(self, clientsock):
        """
        handle_peer( new socket connection ) -> ()

        Dispatches messages from the socket connection
        """

        logging.debug(f'New child {threading.current_thread().name}')
        logging.debug(f'Connected {clientsock.getpeername()}')

        host, port = clientsock.getpeername()
        peer_conn = BTPeerConnection(sock=clientsock, host=host, port=port, debug=False)

        try:
            # msg_type, msg_data = peer_conn.recv_data()
            message = peer_conn.recv_data()
            if message.message_type not in self.handlers:
                logging.debug(f'Not handled: {message.message_type}')
            else:
                logging.debug(f'Handling peer msg: {message.message_type}: {message.message_data}')
                self.handlers[message.message_type](peer_conn, message.message_data)
        except KeyboardInterrupt:
            raise
        except:
            if self.debug:
                traceback.print_exc()

        logging.debug('Disconnecting ' + str(clientsock.getpeername()))
        peer_conn.close()

    def __run_stabilizer(self, stabilizer, delay):
        while not self.shutdown:
            stabilizer()
            time.sleep(delay)

    def set_my_id(self, myid):
        self.id = myid

    def start_stabilizer(self, stabilizer, delay):
        """
        Registers and starts a stabilizer function with this peer.
        The function will be activated every <delay> seconds.
        """
        t = threading.Thread(target=self.__run_stabilizer, args=[stabilizer, delay])
        t.start()

    def add_handler(self, msg_type: 'MessageType', handler):
        """ Registers the handler for the given message type with this peer """
        # assert len(msg_type) == 4
        self.handlers[msg_type] = handler

    def add_router(self, router):
        """ Registers a routing function with this peer. The setup of routing is as follows:
        This peer maintains a list_message of other known peers (in 'self.peers'). The routing function should take the name_message of
        a peer (which may not necessarily be present in 'self.peers') and decide which of the known peers a message
        should be routed to next in order to (hopefully) reach the desired peer. The router function should return a
        tuple of three values: (next-peer-node_id, host, port).
        If the message cannot be routed, the next-peer-node_id should beNone.
        """
        self.router = router

    def add_peer(self, peer_id, host, port):
        """
        Adds a peer name_message and host:port mapping to the known list_message of peers.
        """
        if peer_id not in self.peers and (self.max_peers == 0 or len(self.peers) < self.max_peers):
            self.peers[peer_id] = (host, int(port))
            return True
        else:
            return False

    def get_peer(self, peer_id):
        """ Returns the (host, port) tuple for the given peer name_message """
        assert peer_id in self.peers  # maybe make this just a return NULL?
        return self.peers[peer_id]

    def remove_peer(self, peer_id):
        """ Removes peer information from the known list_message of peers. """
        if peer_id in self.peers:
            del self.peers[peer_id]

    def add_peer_at(self, loc, peer_id, host, port):
        """ Inserts a peer's information at a specific position in the
        list_message of peers. The functions add_peer_at, get_peer_at, and remove_peer_at
        should not be used concurrently with add_peer, get_peer, and/or
        remove_peer.

        """
        self.peers[loc] = (peer_id, host, int(port))

    def get_peer_at(self, loc):
        if loc not in self.peers:
            return None
        return self.peers[loc]

    def remove_peer_at(self, loc):
        self.remove_peer(loc)

    def get_peer_ids(self):
        """ Return a list_message of all known peer node_id's. """
        return list(self.peers.keys())

    def number_of_peers(self):
        """ Return the number of known peer's. """
        return len(self.peers)

    def max_peers_reached(self):
        """ Returns whether the maximum limit of names has been added to the
        list_message of known peers. Always returns True if maxpeers is set to
        0.

        """
        assert self.max_peers == 0 or len(self.peers) <= self.max_peers
        return 0 < self.max_peers == len(self.peers)

    def make_server_socket(self, port, backlog=5):
        """ Constructs and prepares a dht socket listening on the given
        port.

        """
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind(('', port))
        s.listen(backlog)
        return s

    def send_to_peer(self, peer_id, message, wait_reply=True):
        """
        send_to_peer( peer node_id, message type, message data, wait for a reply )
         -> [ ( reply type, reply data ), ... ]

        Send a message to the identified peer. In order to decide how to
        send the message, the router handler for this peer will be called.
        If no router function has been registered, it will not work. The
        router function should provide the next immediate peer to whom the
        message should be forwarded. The peer's reply, if it is expected,
        will be returned.

        Returns None if the message could not be routed.
        """
        next_pid, host, port = None, None, None
        if self.router:
            next_pid, host, port = self.router(peer_id)
        if not self.router or not next_pid:
            logging.debug(f'Unable to route {message.message_type} to {peer_id}')
            return None
        # host,port = self.peers[next_pid]
        return self.connect_and_send(host, port, message, pid=next_pid, wait_reply=wait_reply)

    def connect_and_send(self, host, port, message, pid=None, wait_reply=True):
        """
            connect_and_send( host, port, message type, message data, peer node_id, wait for a reply )
                -> [ ( reply type, reply data ), ... ]
            Connects and sends a message to the specified host:port. The host's reply, if expected, will be returned as
            a list_message of tuples.
        """
        msg_reply = []
        try:
            peer_conn = BTPeerConnection(connection_id=pid, host=host, port=port, debug=self.debug)
            peer_conn.send_data(message)
            logging.debug(f'Sent {pid}: {message.message_type}')

            if wait_reply:
                one_reply = peer_conn.recv_data()
                while one_reply.message_type is not MessageType.NOOP:
                    msg_reply.append(one_reply)
                    logging.debug(f'Got reply {pid}: {msg_reply}')
                    one_reply = peer_conn.recv_data()
            peer_conn.close()
        except KeyboardInterrupt:
            raise
        except:
            if self.debug:
                traceback.print_exc()
        return msg_reply

    def check_live_peers(self):
        """ Attempts to ping_message all currently known peers in order to ensure that
        they are still active. Removes any from the peer list_message that do
        not reply. This function can be used as a simple stabilizer.

        """
        to_delete = []
        for pid in self.peers:
            connected = False
            peer_conn = None
            try:
                logging.debug('Check live %s' % pid)
                host, port = self.peers[pid]
                peer_conn = BTPeerConnection(pid, host, port, debug=self.debug)
                peer_conn.send_data(Message.ping_message())
                connected = True
            except:
                to_delete.append(pid)
            if connected:
                peer_conn.close()

        self.peer_lock.acquire()
        try:
            for pid in to_delete:
                if pid in self.peers:
                    del self.peers[pid]
        finally:
            self.peer_lock.release()

    def mainloop(self):
        s = self.make_server_socket(self.server_port)
        s.settimeout(None)
        logging.debug(f'Server started: {self.id} ({self.server_host}:{self.server_port})')

        while not self.shutdown:
            try:
                logging.debug('Listening for connections...')
                client_sock, client_addr = s.accept()
                client_sock.settimeout(None)
                t = threading.Thread(target=self.__handle_peer, args=[client_sock])
                t.start()
            except KeyboardInterrupt:
                print('KeyboardInterrupt: stopping mainloop')
                self.shutdown = True
                continue
            except:
                traceback.print_exc()
                continue
        logging.debug('Main loop exiting')
        s.close()


# **********************************************************

@dataclasses.dataclass
class BTPeerConnection:
    connection_id: str = None
    sock: 'socket.socket' = None
    host: str = None
    port: int = None
    debug: bool = False

    def __post_init__(self):
        if self.sock is None:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            if self.host is None or self.port is None:
                raise ValueError
            self.sock.connect((self.host, int(self.port)))

    def send_data(self, message: Message):
        """
        send_data( message type, message data ) -> boolean status
        Send a message through a peer connection. Returns True on success
        or False if there was an error.
        """
        try:
            logging.debug(f'[{self.connection_id}] Sending data: {bytes(message)}\n\n')
            self.sock.send(bytes(message))
        except KeyboardInterrupt:
            raise
        except:
            if self.debug:
                traceback.print_exc()
            return False
        return True

    def recv_data(self) -> 'Message':
        """
        recv_data() -> (msg_type, msg_data)

        Receive a message from a peer connection. Returns (None, None)
        if there was any error.
        """
        try:
            msg_type = self.sock.recv(4)
            if not msg_type:
                return Message.empty_message()
            msg_type = MessageType.from_label(msg_type)
            if msg_type is MessageType.NOOP:
                return Message.empty_message()
            len_str = self.sock.recv(4)
            msg_len = int(struct.unpack("!L", len_str)[0])
            msg = b""
            while len(msg) != msg_len:
                data = self.sock.recv(min(2048, msg_len - len(msg)))
                if not len(data):
                    break
                msg += data
            if len(msg) != msg_len:
                # return None, None
                return Message.empty_message()
        except KeyboardInterrupt:
            raise
        except Exception as ex:
            logging.error(ex)
            traceback.print_exc()
            return Message.empty_message()
        return Message(msg_type, msg)

    def close(self):
        """
        close()
        Close the peer connection. The 'send' and 'recv' methods will not work
        after this call.
        """
        self.sock.close()
        self.sock = None

    def __str__(self):
        return f"{self.connection_id}"
